#!/usr/bin/python
'''
  (C) Copyright 2018-2019 Intel Corporation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
  The Government's rights to use, modify, reproduce, release, perform, display,
  or disclose this software are subject to the terms of the Apache License as
  provided in Contract No. B609815.
  Any reproduction of computer software, computer software documentation, or
  portions thereof marked with this legend must also reproduce the markings.
'''

# Some useful test classes inherited from avocado.Test

#pylint: disable=wrong-import-position
import os
import subprocess
import json

from avocado import Test as avocadoTest
from avocado import skip

import ServerUtils
import WriteHostFile
from daos_api import DaosContext, DaosLog
#pylint: enable=wrong-import-position

# pylint: disable=invalid-name
def skipForTicket(ticket):
    ''' Skip a test with a comment about a ticket'''
    return skip("Skipping until {} is fixed.".format(ticket))

# pylint: disable=too-many-instance-attributes
class Test(avocadoTest):
    '''
    Basic Test class

    :avocado: recursive
    '''
    def __init__(self, *args, **kwargs):
        super(Test, self).__init__(*args, **kwargs)
        # set a default timeout of 1 minute
        # tests that want longer should set a timeout in their .yaml file
        # all tests should set a timeout and 60 seconds will enforce it
        if not self.timeout:
            self.timeout = 60

        item_list = self.logdir.split('/')
        # pylint: disable=consider-using-enumerate
        for item_num in range(len(item_list)):
            if item_list[item_num] == 'job-results':
                self.job_id = item_list[item_num + 1]
                break
        # pylint: enable=consider-using-enumerate

        self.log.info("Job-ID: %s", self.job_id)
        self.log.info("Test PID: %s", os.getpid())

        self.basepath = None
        self.orterun = None
        self.tmp = None
        self.server_group = None
        self.daosctl = None
        self.context = None
        self.pool = None
        self.container = None
        self.hostlist = None
        self.hostlist_servers = None
        self.hostfile_servers = None
        self.d_log = None
        self.uri_file = None

        # try collecting this in sysinfo
        ## display process tree before starting (to see what previous left
        ## behind
        #self.log.info("Process tree at start:\n" + \
        #    subprocess.check_output(['ps', 'axf',]))

    def setUp(self):
        self.log.info("setUp() executed from Apricot.Test")
        super(Test, self).setUp()

    def tearDown(self):
        self.log.info("tearDown() executed from Apricot.Test")
        super(Test, self).tearDown()

    def cancelForTicket(self, ticket):
        ''' Skip a test due to a ticket needing to be completed '''
        return self.cancel("Skipping until {} is fixed.".format(ticket))

class TestWithoutServers(Test):
    '''
    Run tests without DAOS servers

    :avocado: recursive
    '''
    def setUp(self):
        # get paths from the build_vars generated by build
        with open('../../../.build_vars.json') as build_vars:
            build_paths = json.load(build_vars)
        self.basepath = os.path.normpath(build_paths['PREFIX']  + "/../")
        self.prefix = build_paths['PREFIX']
        self.tmp = self.prefix + '/tmp'
        self.daos_test = self.basepath + '/install/bin/daos_test'
        self.orterun = self.basepath + '/install/bin/orterun'
        self.daosctl = self.basepath + '/install/bin/daosctl'

        self.context = DaosContext(self.prefix + '/lib/')
        self.d_log = DaosLog(self.context)
        self.d_log.debug("Starting test {}".
                         format(self._Test__name)) # pylint: disable=no-member
        super(TestWithoutServers, self).setUp()

    def tearDown(self):
        self.d_log.debug("Ending test {}".
                         format(self._Test__name)) # pylint: disable=no-member
        super(TestWithoutServers, self).tearDown()

class TestWithServers(TestWithoutServers):
    '''
    Run tests with DAOS servers

    :avocado: recursive
    '''

    def setUp(self):
        super(TestWithServers, self).setUp()

        self.server_group = self.params.get("server_group", '/server/',
                                            'daos_server')
        self.hostlist = self.params.get("test_machines", '/run/hosts/*')

        self.hostfile = WriteHostFile.WriteHostFile(self.hostlist, self.workdir)

        ServerUtils.runServer(self.hostfile, self.server_group, self.basepath)

    def tearDown(self):

        ServerUtils.stopServer(hosts=self.hostlist)

        # pylint: disable=no-member
        test_name = self._Test__name.str_filesystem()
        # pylint: enable=no-member
        # collect up a debug log so that we have a separate one for each
        # subtest
        try:
            logfile = os.environ['D_LOG_FILE']
            dirname, filename = os.path.split(logfile)
            new_logfile = os.path.join(
                dirname,
                "{}_{}".format(test_name, filename)) # pylint: disable=no-member
            # rename on each of the servers
            cmd = '[ ! -f \"{0}\" ] && exit 0 || ' \
                  '    mv \"{0}\" \"{1}\"'.format(logfile, new_logfile)
            for host in self.hostlist:
                subprocess.check_call(['/usr/bin/ssh', host, cmd])
        except KeyError:
            pass

        super(TestWithServers, self).tearDown()

class TestWithServersAndClients(TestWithServers):
    '''
    Run tests with DAOS servers

    :avocado: recursive
    '''

    # use hostlist_servers and hostlist_clients instead of just hostlist
